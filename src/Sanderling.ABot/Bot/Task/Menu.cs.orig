using System.Collections.Generic;
using Sanderling.Motor;
using Sanderling.Interface.MemoryStruct;
using System.Linq;
using BotEngine.Common;
using Bib3.Geometrik;
using System;
<<<<<<< origin/master
=======
using System.Threading;
>>>>>>> local
using WindowsInput.Native;
using Bib3;

namespace Sanderling.ABot.Bot.Task
{
	public class HotkeyTask : IBotTask
	{
<<<<<<< origin/master
		public HotkeyTask(VirtualKeyCode key, params VirtualKeyCode[] mods)
		{
			Key = key;
			Modifiers = mods;
		}
		public VirtualKeyCode[] Modifiers;
		public VirtualKeyCode Key;

		public IEnumerable<IBotTask> Component => null;
		
		public IEnumerable<MotionParam> Effects
		{
			get
			{
				foreach (var m in Modifiers)
					yield return m.KeyDown();
				yield return Key.KeyboardPress();
				foreach (var m in Modifiers.Reverse())
					yield return m.KeyUp();
=======
		private readonly VirtualKeyCode[] modifiers;

		public HotkeyTask(VirtualKeyCode key, params VirtualKeyCode[] modifiers)
		{
			this.modifiers = modifiers;
			Key = key;
		}

		private VirtualKeyCode Key { get; }
		public IEnumerable<IBotTask> Component => null;
		public IEnumerable<MotionParam> ClientActions
		{
			get
			{
				foreach (var key in modifiers)
				{
					yield return key.KeyDown();
				}
				yield return Key.KeyboardPress();
				foreach (var key in modifiers)
				{
					yield return key.KeyUp();
				}
			}
		}
	}

	public class DelayTask : IBotTask
	{
		private const int delayMs = 350;
		private VirtualKeyCode Key { get; }
		public IEnumerable<IBotTask> Component => null;
		public IEnumerable<MotionParam> ClientActions
		{
			get
			{
				Thread.Sleep(delayMs);
				yield break;
>>>>>>> local
			}
		}
	}

	public class MenuPathTask : IBotTask
	{
		public Bot Bot;

		public IUIElement RootUIElement;

		public string[][] ListMenuListPriorityEntryRegexPattern;
<<<<<<< origin/master

		public VirtualKeyCode ModifierKey;

=======
		public VirtualKeyCode? ModifierKey { get; set; }
>>>>>>> local
		public IEnumerable<IBotTask> Component => null;

		bool MenuOpenOnRootPossible()
		{
			var memoryMeasurement = Bot?.MemoryMeasurementAtTime?.Value;

			var menu = memoryMeasurement?.Menu?.FirstOrDefault();

			if (null == menu)
				return false;

			var overviewEntry = RootUIElement as IOverviewEntry;

			IUIElement regionExpected = RootUIElement;

			if (null != overviewEntry)
			{
				regionExpected = memoryMeasurement?.WindowOverview?.FirstOrDefault();

				if (!(overviewEntry.IsSelected ?? false))
					return false;

				if (!(menu?.Entry?.Any(menuEntry => menuEntry?.Text?.RegexMatchSuccessIgnoreCase(@"remove.*overview") ?? false) ?? false))
					return false;
			}

			if (regionExpected.Region.Intersection(menu.Region.WithSizeExpandedPivotAtCenter(10)).IsEmpty())
				return false;

			return true;
		}

		public IEnumerable<MotionParam> ClientActions
		{
			get
			{
				var memoryMeasurement = Bot?.MemoryMeasurementAtTime?.Value;

				var listMenu = memoryMeasurement?.Menu?.ToArray();

				var rootUIElement = RootUIElement;

				if (null == rootUIElement)
					yield break;

				IMenuEntry menuEntryToContinue = null;

				var mouseClickOnRootAge = Bot?.MouseClickLastAgeStepCountFromUIElement(RootUIElement);

				if (ListMenuListPriorityEntryRegexPattern == null)
				{
					yield return ModifierKey.KeyDown();
					yield return RootUIElement?.MouseClick(BotEngine.Motor.MouseButtonIdEnum.Left);
					yield return ModifierKey.KeyUp();
					yield break;
				}

				if (MenuOpenOnRootPossible() && mouseClickOnRootAge <= listMenu?.Length)
				{
					var levelCount = Math.Min(ListMenuListPriorityEntryRegexPattern?.Length ?? 0, listMenu?.Length ?? 0);

					for (int levelIndex = 0; levelIndex < levelCount; levelIndex++)
					{
						var listPriorityEntryRegexPattern = ListMenuListPriorityEntryRegexPattern[levelIndex];

						var menuEntry =
							listPriorityEntryRegexPattern
							?.WhereNotDefault()
							?.Select(priorityEntryRegexPattern =>
								listMenu[levelIndex]?.Entry
								?.FirstOrDefault(c => c?.Text?.RegexMatchSuccessIgnoreCase(priorityEntryRegexPattern) ?? false))
							?.WhereNotDefault()?.FirstOrDefault();

						if (null == menuEntry)
							break;

						menuEntryToContinue = menuEntry;

						if (!(menuEntry?.HighlightVisible ?? false))
							break;
					}
				}

				var buttonToUse = ListMenuListPriorityEntryRegexPattern.IsNullOrEmpty() || menuEntryToContinue != null
					? BotEngine.Motor.MouseButtonIdEnum.Left
					: BotEngine.Motor.MouseButtonIdEnum.Right;
				if (ModifierKey != null)
				{
					yield return ModifierKey.Value.KeyDown();
					yield return (menuEntryToContinue ?? RootUIElement)?.MouseClick(buttonToUse);
					yield return ModifierKey.Value.KeyUp();
				}
				else
				{
					yield return (menuEntryToContinue ?? RootUIElement)?.MouseClick(buttonToUse);
				}
			}
		}
	}

	static public class MenuTaskExtension
	{
		static public MenuPathTask ClickMenuEntryByRegexPattern(
			this IUIElement rootUIElement,
			Bot bot,
			string menuEntryRegexPattern)
		{
			if (null == rootUIElement)
				return null;

			return new MenuPathTask
			{
				Bot = bot,
				RootUIElement = rootUIElement,
				ListMenuListPriorityEntryRegexPattern = new[] { new[] { menuEntryRegexPattern } },
			};
		}

<<<<<<< origin/master
		public static MenuPathTask ClickWithModifier(this IUIElement element, Bot bot, VirtualKeyCode modifier)
		{
			return new MenuPathTask
			{
				Bot = bot,
				RootUIElement = element,
				ModifierKey = modifier,
=======
		static public MenuPathTask ClickMenuEntryWithModifierKey(
			this IUIElement rootUIElement,
			Bot bot,
			VirtualKeyCode modifierKey)
		{
			if (null == rootUIElement)
				return null;

			return new MenuPathTask
			{
				Bot = bot,
				RootUIElement = rootUIElement,
				ModifierKey = modifierKey,
>>>>>>> local
			};
		}
	}
}
